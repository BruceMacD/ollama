name: Release

on:
  push:
    branches:
      - main

jobs:
  cuda-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        cuda: ['11.7.0']
    steps:
      - uses: jimver/cuda-toolkit@v0.2.11
        with:
          cuda: ${{ matrix.cuda }}
          method: network
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          nvcc --version
      - name: Generate CUDA runners
        run: |
          go generate ./...
      - name: Prepare CUDA output for upload
        run: |
          mkdir -p artifact-${{ matrix.cuda }}
          cp -r ./llm/llama.cpp/*/build/* artifact-${{ matrix.cuda }}
      - uses: actions/upload-artifact@v2
        with:
          name: cuda-${{ matrix.cuda }}
          path: artifact-${{ matrix.cuda }}/

  ollama-build:
    needs: [cuda-build]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Generate CPU runners
        run: |
          go generate ./...

      - name: Download CUDA 11 runner
        uses: actions/download-artifact@v2
        with:
          name: cuda-11.7.0
          path: artifacts/
      - run: |
          unzip artifacts/cuda-11.7.0 -d ./temp-cuda-11
          mkdir -p ./llm/llama.cpp/ggml/build/cuda-11/bin
          mkdir -p ./llm/llama.cpp/gguf/build/cuda-11/bin
          mv ./temp-cuda-11/llm/llama.cpp/ggml/build/cuda-11/bin/server ./llm/llama.cpp/ggml/build/cuda-11/bin/server
          mv ./temp-cuda-11/llm/llama.cpp/gguf/build/cuda-11/bin/server ./llm/llama.cpp/gguf/build/cuda-11/bin/server
          rm -rf ./temp-cuda-11

      - name: Package and Upload Entire Project
        run: |
          zip -r ollama-project.zip .
        continue-on-error: true # Continue even if this step fails
      - uses: actions/upload-artifact@v2
        with:
          name: ollama-project
          path: ollama-project.zip

      - name: Build with all packaged in runners
        run: |
          go build -o ollama
        env:
          GOFLAGS: >-
            '-ldflags=-w -s
              "-X=github.com/brucemacd/ollama/version.Version=${{ github.ref_name }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ollama-amd64
          path: ollama-amd64
